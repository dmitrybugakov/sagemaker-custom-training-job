#!/usr/bin/env python

"""
It starts nginx and gunicorn with the correct configurations and then simply waits until
gunicorn exits.

The flask server is specified to be the app object in wsgi.py

We set the following parameters:

Parameter                Environment Variable              Default Value
---------                --------------------              -------------
number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
timeout                  MODEL_SERVER_TIMEOUT              60 seconds
"""

from __future__ import print_function
from multiprocessing import cpu_count
from os import kill, environ, wait
import signal
from subprocess import check_call, Popen
import sys
import logging

MODEL_SERVER_TIMEOUT = 'MODEL_SERVER_TIMEOUT'
MODEL_SERVER_WORKERS = 'MODEL_SERVER_WORKERS'

logging.basicConfig(level=logging.INFO)


def get_parameters():
    return environ.get(MODEL_SERVER_TIMEOUT, 60), int(environ.get(MODEL_SERVER_WORKERS, cpu_count()))


def on_kill(gnc_pid, ng_pid):
    try:
        kill(ng_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        kill(gnc_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def ln_std(std='stdout'):
    if std == 'stdout':
        log = 'access'
    elif std == 'stderr':
        log = 'error'
    else:
        raise NotImplementedError('Invalid std type {std}'.format(std=std))
    check_call(['ln', '-sf', '/dev/{std}'.format(std=std), '/var/log/nginx/{log}.log'.format(log=log)])


# noinspection SpellCheckingInspection
def start_nginx():
    return Popen(['nginx', '-c', '/opt/program/nginx.conf'])


# noinspection SpellCheckingInspection
def start_gunicorn(timeout, workers):
    return Popen(['gunicorn',
                  '--timeout', str(timeout), '-k', 'gevent', '-b', 'unix:/tmp/gunicorn.sock',
                  '-w', str(workers),
                  'wsgi:app'])


# noinspection SpellCheckingInspection
def start():
    timeout, workers = get_parameters()
    logging.info('Start the inference server with {} workers.'.format(workers))
    ln_std(std='stdout')
    ln_std(std='stderr')
    nginx = start_nginx()
    gunicorn = start_gunicorn(timeout, workers)
    signal.signal(signal.SIGTERM, lambda a, b: on_kill(gunicorn.pid, nginx.pid))
    while True:
        pid, _ = wait()
        if pid in {nginx.pid, gunicorn.pid}:
            break

    on_kill(gunicorn.pid, nginx.pid)
    logging.info('Exit inference server')


if __name__ == '__main__':
    start()
